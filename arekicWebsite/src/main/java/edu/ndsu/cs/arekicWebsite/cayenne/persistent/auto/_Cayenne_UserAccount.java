package edu.ndsu.cs.arekicWebsite.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Cayenne_UserAccount was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Cayenne_UserAccount extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PK_PK_COLUMN = "PK";

    public static final Property<String> EMAIL_ADDRESS = Property.create("emailAddress", String.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> PASSWORD_HASH = Property.create("passwordHash", String.class);
    public static final Property<String> PASSWORD_SALT = Property.create("passwordSalt", String.class);
    public static final Property<String> USER_ID = Property.create("userID", String.class);

    protected String emailAddress;
    protected String name;
    protected String passwordHash;
    protected String passwordSalt;
    protected String userID;


    public void setEmailAddress(String emailAddress) {
        beforePropertyWrite("emailAddress", this.emailAddress, emailAddress);
        this.emailAddress = emailAddress;
    }

    public String getEmailAddress() {
        beforePropertyRead("emailAddress");
        return this.emailAddress;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setPasswordHash(String passwordHash) {
        beforePropertyWrite("passwordHash", this.passwordHash, passwordHash);
        this.passwordHash = passwordHash;
    }

    public String getPasswordHash() {
        beforePropertyRead("passwordHash");
        return this.passwordHash;
    }

    public void setPasswordSalt(String passwordSalt) {
        beforePropertyWrite("passwordSalt", this.passwordSalt, passwordSalt);
        this.passwordSalt = passwordSalt;
    }

    public String getPasswordSalt() {
        beforePropertyRead("passwordSalt");
        return this.passwordSalt;
    }

    public void setUserID(String userID) {
        beforePropertyWrite("userID", this.userID, userID);
        this.userID = userID;
    }

    public String getUserID() {
        beforePropertyRead("userID");
        return this.userID;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "emailAddress":
                return this.emailAddress;
            case "name":
                return this.name;
            case "passwordHash":
                return this.passwordHash;
            case "passwordSalt":
                return this.passwordSalt;
            case "userID":
                return this.userID;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "emailAddress":
                this.emailAddress = (String)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "passwordHash":
                this.passwordHash = (String)val;
                break;
            case "passwordSalt":
                this.passwordSalt = (String)val;
                break;
            case "userID":
                this.userID = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.emailAddress);
        out.writeObject(this.name);
        out.writeObject(this.passwordHash);
        out.writeObject(this.passwordSalt);
        out.writeObject(this.userID);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.emailAddress = (String)in.readObject();
        this.name = (String)in.readObject();
        this.passwordHash = (String)in.readObject();
        this.passwordSalt = (String)in.readObject();
        this.userID = (String)in.readObject();
    }

}
